#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∞ –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MCP —Å–µ—Ä–≤–µ—Ä–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_model.py "–ö—É–ø–∏ 10 –∞–∫—Ü–∏–π –°–±–µ—Ä–±–∞–Ω–∫–∞ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ"
    python run_model.py --input queries.txt --output results.csv
"""

import argparse
import json
import os
import sys
from pathlib import Path

import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è


class MCPModelRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä"""

    def __init__(
        self,
        mcp_api_url: str = "http://localhost:8000",
        openrouter_api_key: str | None = None,
        openrouter_model: str = "openai/gpt-4o-mini",
        account_id_placeholder: str = "{account_id}",
    ):
        self.mcp_api_url = mcp_api_url
        self.openrouter_api_key = openrouter_api_key or os.getenv("OPENROUTER_API_KEY")
        self.openrouter_base = os.getenv("OPENROUTER_BASE", "https://openrouter.ai/api/v1")
        self.openrouter_model = openrouter_model
        self.account_id_placeholder = account_id_placeholder
        self.jwt_token = None
        self.tools = []

        if not self.openrouter_api_key:
            raise ValueError("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_jwt_token(self, api_key: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä

        Args:
            api_key: Finam API –∫–ª—é—á

        Returns:
            JWT —Ç–æ–∫–µ–Ω
        """
        print("üîê –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞...")
        response = requests.post(
            f"{self.mcp_api_url}/call_tool",
            json={"tool_name": "auth", "arguments": {"secret": api_key}},
            timeout=30,
        )
        response.raise_for_status()

        result = response.json()
        if not result.get("success"):
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {result.get('error')}")

        token = result["result"].get("token")
        if not token:
            raise RuntimeError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")

        print(f"‚úÖ JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        self.jwt_token = token
        return token

    def load_tools(self) -> list[dict]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP tools

        Returns:
            –°–ø–∏—Å–æ–∫ tools –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI
        """
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ MCP tools...")
        response = requests.get(f"{self.mcp_api_url}/tools", timeout=10)
        response.raise_for_status()

        tools = response.json()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tools)} tools")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OpenAI —Ñ–æ—Ä–º–∞—Ç
        openai_tools = []
        for tool in tools:
            openai_tools.append(
                {
                    "type": "function",
                    "function": {
                        "name": tool["name"],
                        "description": tool["description"],
                        "parameters": tool["input_schema"],
                    },
                }
            )

        self.tools = openai_tools
        return openai_tools

    def call_llm(self, messages: list[dict], tools: list[dict]) -> dict:
        """
        –í—ã–∑–≤–∞—Ç—å LLM —Å tools

        Args:
            messages: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            tools: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö tools

        Returns:
            –û—Ç–≤–µ—Ç LLM
        """
        response = requests.post(
            f"{self.openrouter_base}/chat/completions",
            headers={
                "Authorization": f"Bearer {self.openrouter_api_key}",
                "Content-Type": "application/json",
            },
            json={
                "model": self.openrouter_model,
                "messages": messages,
                "tools": tools,
                "tool_choice": "auto",
            },
            timeout=60,
        )
        response.raise_for_status()
        return response.json()

    def extract_api_call(self, tool_name: str, arguments: dict) -> str:
        """
        –ò–∑–≤–ª–µ—á—å –º–µ—Ç–æ–¥ –∏ slug API –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ tool call

        Args:
            tool_name: –ò–º—è –≤—ã–∑–≤–∞–Ω–Ω–æ–≥–æ tool
            arguments: –ê—Ä–≥—É–º–µ–Ω—Ç—ã tool

        Returns:
            –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "POST /v1/accounts/{account_id}/orders"
        """
        # –ú–∞–ø–ø–∏–Ω–≥ tool_name -> (HTTP –º–µ—Ç–æ–¥, –ø—É—Ç—å)
        api_mapping = {
            # AuthService
            "auth": ("POST", "/v1/sessions"),
            "get_session_details": ("POST", "/v1/sessions/details"),
            # AccountsService
            "get_account": ("GET", "/v1/accounts/{account_id}"),
            "get_transactions": ("GET", "/v1/accounts/{account_id}/transactions"),
            "get_trades": ("GET", "/v1/accounts/{account_id}/trades"),
            "get_positions": ("GET", "/v1/accounts/{account_id}"),
            # OrdersService
            "get_orders": ("GET", "/v1/accounts/{account_id}/orders"),
            "get_order": ("GET", "/v1/accounts/{account_id}/orders/{order_id}"),
            "create_order": ("POST", "/v1/accounts/{account_id}/orders"),
            "cancel_order": ("DELETE", "/v1/accounts/{account_id}/orders/{order_id}"),
            # AssetsService
            "get_asset": ("GET", "/v1/assets/{symbol}"),
            "get_asset_params": ("GET", "/v1/assets/{symbol}/params"),
            "get_options_chain": ("GET", "/v1/assets/{underlying_symbol}/options"),
            # MarketDataService
            "get_quote": ("GET", "/v1/instruments/{symbol}/quotes/latest"),
            "get_orderbook": ("GET", "/v1/instruments/{symbol}/orderbook"),
            "get_candles": ("GET", "/v1/instruments/{symbol}/bars"),
            "get_latest_trades": ("GET", "/v1/instruments/{symbol}/trades/latest"),
        }

        if tool_name not in api_mapping:
            return f"UNKNOWN {tool_name}"

        method, path = api_mapping[tool_name]

        # –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—É—Ç–∏ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ arguments
        if "{account_id}" in path:
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è account_id
            pass  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if "{order_id}" in path:
            order_id = arguments.get("order_id", "{order_id}")
            path = path.replace("{order_id}", order_id)
        if "{symbol}" in path:
            symbol = arguments.get("symbol", "{symbol}")
            path = path.replace("{symbol}", symbol)
        if "{underlying_symbol}" in path:
            underlying_symbol = arguments.get("underlying_symbol", "{underlying_symbol}")
            path = path.replace("{underlying_symbol}", underlying_symbol)

        return f"{method} {path}"

    def process_query(self, query: str) -> dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å

        Args:
            query: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {
                "query": str,
                "tool_name": str,
                "arguments": dict,
                "api_call": str,
                "success": bool,
                "error": str | None
            }
        """
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å: {query}")

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = """–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Finam TradeAPI.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π API –º–µ—Ç–æ–¥ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –î–ª—è account_id –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {account_id}
2. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π create_order
3. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π get_* –º–µ—Ç–æ–¥—ã
4. –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π cancel_order
5. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π symbol –≤ —Ñ–æ—Ä–º–∞—Ç–µ TICKER@EXCHANGE (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER@MISX)
"""

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": query},
        ]

        try:
            # –í—ã–∑—ã–≤–∞–µ–º LLM
            print("ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM...")
            response = self.call_llm(messages, self.tools)

            choice = response["choices"][0]
            message = choice["message"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ LLM –≤—ã–∑–≤–∞–ª tool
            if not message.get("tool_calls"):
                return {
                    "query": query,
                    "tool_name": None,
                    "arguments": {},
                    "api_call": None,
                    "success": False,
                    "error": "LLM –Ω–µ –≤—ã–∑–≤–∞–ª –Ω–∏ –æ–¥–∏–Ω tool",
                    "response": message.get("content"),
                }

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π tool call
            tool_call = message["tool_calls"][0]
            function = tool_call["function"]
            tool_name = function["name"]
            arguments = json.loads(function["arguments"])

            print(f"‚úÖ LLM –≤—ã–±—Ä–∞–ª tool: {tool_name}")
            print(f"üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {json.dumps(arguments, ensure_ascii=False, indent=2)}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º API call
            api_call = self.extract_api_call(tool_name, arguments)
            print(f"üéØ API –≤—ã–∑–æ–≤: {api_call}")

            return {
                "query": query,
                "tool_name": tool_name,
                "arguments": arguments,
                "api_call": api_call,
                "success": True,
                "error": None,
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {
                "query": query,
                "tool_name": None,
                "arguments": {},
                "api_call": None,
                "success": False,
                "error": str(e),
            }

    def run_batch(self, queries: list[str]) -> list[dict]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤

        Args:
            queries: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        results = []
        for i, query in enumerate(queries, 1):
            print(f"\n{'=' * 60}")
            print(f"–ó–∞–ø—Ä–æ—Å {i}/{len(queries)}")
            print(f"{'=' * 60}")

            result = self.process_query(query)
            results.append(result)

        return results


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≥–æ–Ω –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä")
    parser.add_argument("query", nargs="?", help="–¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    parser.add_argument("--input", "-i", help="–§–∞–π–ª —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
    parser.add_argument("--output", "-o", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (CSV)")
    parser.add_argument("--api-key", help="Finam API –∫–ª—é—á (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FINAM_API_KEY –≤ .env)")
    parser.add_argument("--mcp-url", default="http://localhost:8000", help="URL MCP API")
    parser.add_argument(
        "--model", default="openai/gpt-4o-mini", help="–ú–æ–¥–µ–ª—å OpenRouter"
    )

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not args.query and not args.input:
        parser.error("–£–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ query, –ª–∏–±–æ --input")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º runner
    runner = MCPModelRunner(
        mcp_api_url=args.mcp_url,
        openrouter_model=args.model,
    )

    # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    api_key = args.api_key or os.getenv("FINAM_API_KEY")
    if api_key:
        try:
            runner.get_jwt_token(api_key)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω: {e}")
            print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º tools
    runner.load_tools()

    # –ß–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
    if args.input:
        input_file = Path(args.input)
        if not input_file.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input}")
            sys.exit(1)

        with open(input_file, encoding="utf-8") as f:
            queries = [line.strip() for line in f if line.strip()]
    else:
        queries = [args.query]

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
    results = runner.run_batch(queries)

    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print(f"\n{'=' * 60}")
    print("üìä –°–í–û–î–ö–ê")
    print(f"{'=' * 60}")
    print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(results)}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {sum(1 for r in results if r['success'])}")
    print(f"–û—à–∏–±–æ–∫: {sum(1 for r in results if not r['success'])}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if args.output:
        import csv

        output_file = Path(args.output)
        output_file.parent.mkdir(parents=True, exist_ok=True)

        with open(output_file, "w", encoding="utf-8", newline="") as f:
            writer = csv.DictWriter(
                f,
                fieldnames=["query", "api_call", "tool_name", "success", "error"],
            )
            writer.writeheader()

            for result in results:
                writer.writerow(
                    {
                        "query": result["query"],
                        "api_call": result["api_call"] or "",
                        "tool_name": result["tool_name"] or "",
                        "success": result["success"],
                        "error": result["error"] or "",
                    }
                )

        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
    else:
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for i, result in enumerate(results, 1):
            print(f"\n{i}. {result['query']}")
            if result["success"]:
                print(f"   ‚úÖ {result['api_call']}")
            else:
                print(f"   ‚ùå {result['error']}")


if __name__ == "__main__":
    main()

