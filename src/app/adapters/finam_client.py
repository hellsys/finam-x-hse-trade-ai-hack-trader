"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Finam TradeAPI
https://tradeapi.finam.ru/
"""

import json
import logging
import os
from typing import Any

import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


# –í—Å–µ mcp –º–µ—Ç–æ–¥—ã –±—É–¥—É—Ç —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å
class FinamAPIClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Finam TradeAPI

    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://tradeapi.finam.ru/
    """

    def __init__(
        self,
        access_token: str | None = None,
        api_key: str | None = None,
        base_url: str | None = None,
        use_auth_manager: bool = True,
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞

        Args:
            access_token: JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FINAM_ACCESS_TOKEN)
            api_key: API –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FINAM_API_KEY)
            base_url: –ë–∞–∑–æ–≤—ã–π URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
            use_auth_manager: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        """
        self.base_url = base_url or os.getenv("FINAM_API_BASE_URL", "https://api.finam.ru")
        self.session = requests.Session()
        self.session.headers.update({"Content-Type": "application/json"})

        # –†–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.use_auth_manager = use_auth_manager
        self._auth_manager = None
        self._static_token = access_token or os.getenv("FINAM_ACCESS_TOKEN", "")

        # –ï—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á –∏ –≤–∫–ª—é—á–µ–Ω auth manager - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if use_auth_manager:
            api_key_to_use = api_key or os.getenv("FINAM_API_KEY", "")
            if api_key_to_use:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Docker
                try:
                    from ..core.auth import FinamAuthManager
                except ImportError:
                    # Fallback –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
                    from src.app.core.auth import FinamAuthManager

                self._auth_manager = FinamAuthManager(
                    api_key=api_key_to_use,
                    base_url=self.base_url,
                )

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if self._static_token and not self._auth_manager:
            self.session.headers.update({
                "Authorization": f"Bearer {self._static_token}",
            })

    def _get_current_token(self) -> str | None:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

        Returns:
            JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ None
        """
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è auth manager - –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ–≥–æ
        if self._auth_manager:
            return self._auth_manager.get_jwt_token()

        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω
        return self._static_token

    def _update_auth_header(self) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º"""
        token = self._get_current_token()
        if token:
            self.session.headers.update({
                "Authorization": f"{token}",
            })

    def execute_request(self, method: str, path: str, **kwargs: Any) -> dict[str, Any]:  # noqa: ANN401
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ Finam TradeAPI

        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST, DELETE –∏ —Ç.–¥.)
            path: –ü—É—Ç—å API (–Ω–∞–ø—Ä–∏–º–µ—Ä, /v1/instruments/SBER@MISX/quotes/latest)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è requests

        Returns:
            –û—Ç–≤–µ—Ç API –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è

        Raises:
            requests.HTTPError: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è auth manager)
        if self._auth_manager:
            self._update_auth_header()

        url = f"{self.base_url}{path}"

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        log_data = {
            "method": method,
            "url": url,
            "params": kwargs.get("params"),
            "json": self._mask_sensitive_data(kwargs.get("json")),
        }
        logger.info(f"üì§ Finam API Request: {method} {path}")
        logger.debug(f"Request details: {json.dumps(log_data, ensure_ascii=False, indent=2)}")

        try:
            response = self.session.request(method, url, timeout=30, **kwargs)
            response.raise_for_status()

            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è DELETE)
            if not response.content:
                result = {"status": "success", "message": "Operation completed"}
                logger.info(f"‚úÖ Finam API Response: {method} {path} - {response.status_code} (empty body)")
                return result

            result = response.json()

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            logger.info(f"‚úÖ Finam API Response: {method} {path} - {response.status_code}")
            logger.debug(f"Response body: {json.dumps(result, ensure_ascii=False, indent=2)[:1000]}...")

            return result

        except requests.exceptions.HTTPError as e:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            error_detail = {"error": str(e), "status_code": e.response.status_code if e.response else None}

            try:
                if e.response and e.response.content:
                    error_detail["details"] = e.response.json()
            except Exception:
                error_detail["details"] = e.response.text if e.response else None

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É HTTP
            logger.error(
                f"‚ùå Finam API Error: {method} {path} - {error_detail['status_code']}\n"
                f"Error: {error_detail.get('details', str(e))}"
            )

            return error_detail

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
            logger.error(f"üí• Finam API Exception: {method} {path} - {type(e).__name__}: {str(e)}")
            return {"error": str(e), "type": type(e).__name__}

    def _mask_sensitive_data(self, data: dict[str, Any] | None) -> dict[str, Any] | None:
        """
        –ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ö (—Ç–æ–∫–µ–Ω—ã, —Å–µ–∫—Ä–µ—Ç—ã)

        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        if not data:
            return data

        masked = data.copy()
        sensitive_keys = ["secret", "token", "password", "api_key", "apikey"]

        for key in masked:
            if any(sensitive in key.lower() for sensitive in sensitive_keys):
                if isinstance(masked[key], str) and len(masked[key]) > 8:
                    masked[key] = masked[key][:4] + "****" + masked[key][-4:]
                else:
                    masked[key] = "****"

        return masked

    def get_auth_info(self) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        info: dict[str, Any] = {
            "mode": "auth_manager" if self._auth_manager else "static_token",
            "has_token": bool(self._get_current_token()),
        }

        if self._auth_manager:
            lifetime = self._auth_manager.get_token_lifetime()
            info["token_lifetime"] = str(lifetime) if lifetime else None
            info["account_ids"] = self._auth_manager.get_account_ids()
            info["readonly"] = self._auth_manager.is_readonly()

        return info

    # –ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (AuthService)

    def auth(self, secret: str) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å JWT-—Ç–æ–∫–µ–Ω –ø–æ API-–∫–ª—é—á—É (Auth)

        Args:
            secret: –°–µ–∫—Ä–µ—Ç–Ω—ã–π API-–∫–ª—é—á

        Returns:
            –û–±—ä–µ–∫—Ç JSON —Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º 'token' (—Å—Ç—Ä–æ–∫–∞)
        """
        return self.execute_request("POST", "/v1/sessions", json={"secret": secret})

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏ (AccountsService)

    def get_account(self, account_id: str) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á—ë—Ç–µ (GetAccount)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Ç–∏–ø —Å—á—ë—Ç–∞, —Å—Ç–∞—Ç—É—Å, –æ–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª (equity), –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å,
        –¥–µ–Ω–µ–∂–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤–∞–ª—é—Ç–∞–º (cash), –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (positions),
        –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ —Å–µ–∫—Ü–∏—è–º: –ú–æ—Å–ë–∏—Ä–∂–∞, –ê–º–µ—Ä–ë–∏—Ä–∂–∞, FORTS (portfolio)
        """
        return self.execute_request("GET", f"/v1/accounts/{account_id}")

    def get_transactions(
        self, account_id: str, start: str | None = None, end: str | None = None, limit: int | None = None
    ) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å—á—ë—Ç—É (Transactions)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏: –≤–≤–æ–¥/–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤, –∫–æ–º–∏—Å—Å–∏–∏, –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤.
        –ö–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç: id, category (funding/fee), timestamp, symbol,
        —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è (change), —Ñ–ª–∞–≥ trade, transaction_category, transaction_name

        Args:
            account_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—á—ë—Ç–∞
            start: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ ISO 8601 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            end: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ ISO 8601 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        params = {}
        if start:
            params["interval.start"] = start
        if end:
            params["interval.end"] = end
        if limit:
            params["limit"] = limit
        return self.execute_request("GET", f"/v1/accounts/{account_id}/transactions", params=params)

    def get_trades(
        self, account_id: str, start: str | None = None, end: str | None = None, limit: int | None = None
    ) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ (Trades)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥.
        –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç: trade_id, symbol, price, size, side (buy/sell),
        timestamp, order_id, account_id

        Args:
            account_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—á—ë—Ç–∞
            start: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ ISO 8601 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            end: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ ISO 8601 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        params = {}
        if start:
            params["interval.start"] = start
        if end:
            params["interval.end"] = end
        if limit:
            params["limit"] = limit
        return self.execute_request("GET", f"/v1/accounts/{account_id}/trades", params=params)

    def get_positions(self, account_id: str) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å—á—ë—Ç—É

        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ–∑–∏—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç get_account –≤ –ø–æ–ª–µ 'positions'.
        –ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç: symbol, quantity, average_price, current_price,
        market_value, unrealized_profit
        """
        return self.execute_request("GET", f"/v1/accounts/{account_id}")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–¥–µ—Ä–∞–º–∏ (OrdersService)

    def get_orders(self, account_id: str) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ (GetOrders)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ—Ä–¥–µ—Ä—ã –¥–ª—è —Å—á—ë—Ç–∞.
        –ö–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç: order_id, status (New/Accepted/Rejected/PartiallyFilled/Filled/Withdrawn),
        –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (transact_at, accept_at, withdraw_at)
        """
        return self.execute_request("GET", f"/v1/accounts/{account_id}/orders")

    def get_order(self, account_id: str, order_id: str) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ—Ä–¥–µ—Ä–µ (GetOrder)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç OrderState —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ä–¥–µ—Ä–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        return self.execute_request("GET", f"/v1/accounts/{account_id}/orders/{order_id}")

    def create_order(self, account_id: str, order_data: dict[str, Any]) -> dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∏—Ä–∂–µ–≤–æ–π –æ—Ä–¥–µ—Ä (PlaceOrder)

        –û–±—ä–µ–∫—Ç order_data –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
        - symbol: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        - quantity: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
        - side: buy –∏–ª–∏ sell
        - type: market, limit, stop, stop_limit, take_profit
        - time_in_force: day, gtc, ioc, fok
        - limit_price: —Ü–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
        - stop_price: —Å—Ç–æ–ø-—Ü–µ–Ω–∞ (–¥–ª—è —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–æ–≤)
        - stop_condition: bid, ask, last
        - client_order_id: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - valid_before: –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è ISO 8601 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - comment: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            OrderState —Å order_id, exec_id, status –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        """
        return self.execute_request("POST", f"/v1/accounts/{account_id}/orders", json=order_data)

    def cancel_order(self, account_id: str, order_id: str) -> dict[str, Any]:
        """
        –û—Ç–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä (CancelOrder)

        Returns:
            OrderState –≤ –º–æ–º–µ–Ω—Ç –æ—Ç–º–µ–Ω—ã —Å –ø—Ä–∏—á–∏–Ω–æ–π –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π withdraw_at
        """
        return self.execute_request("DELETE", f"/v1/accounts/{account_id}/orders/{order_id}")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (AssetsService)

    def get_asset(self, symbol: str, account_id: str) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ (GetAsset)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: symbol, board, id, ticker, mic,
        isin, type (–∞–∫—Ü–∏—è/–æ–±–ª–∏–≥–∞—Ü–∏—è/—Ñ—å—é—á–µ—Ä—Å/–æ–ø—Ü–∏–æ–Ω), name, decimals, min_step,
        lot_size, expiration_date (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö), quote_currency

        Args:
            symbol: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER@MISX)
            account_id: ID —Å—á—ë—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        """
        return self.execute_request("GET", f"/v1/assets/{symbol}", params={"account_id": account_id})

    def get_asset_params(self, symbol: str, account_id: str) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (GetAssetParams)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å—á—ë—Ç–µ:
        - tradeable: –º–æ–∂–Ω–æ –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å (true/false)
        - longable/shortable: –æ–±—ä–µ–∫—Ç—ã —Å value (—Ä–∞–∑—Ä–µ—à—ë–Ω –ª–∏ –¥–ª–∏–Ω–Ω—ã–π/–∫–æ—Ä–æ—Ç–∫–∏–π) –∏ halted_days
        - —Ä–∏—Å–∫-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: initial_margin, maintain_margin, risk_rate

        Args:
            symbol: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            account_id: –°—á—ë—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        """
        return self.execute_request("GET", f"/v1/assets/{symbol}/params", params={"account_id": account_id})

    def get_options_chain(self, underlying_symbol: str) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–Ω—ã–π —Ä—è–¥ (OptionsChain)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–æ–Ω–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤.
        –ö–∞–∂–¥—ã–π –æ–ø—Ü–∏–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç: symbol, type (call/put), contract_size, strike,
        multiplier, –ø–µ—Ä–∏–æ–¥ —Ç–æ—Ä–≥–æ–≤ (trade_first_day, trade_last_day),
        –ø–µ—Ä–∏–æ–¥ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ (expiration_first_day, expiration_last_day)

        Args:
            underlying_symbol: –ë–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER)
        """
        return self.execute_request("GET", f"/v1/assets/{underlying_symbol}/options")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (MarketDataService)

    def get_quote(self, symbol: str) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (LastQuote)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: symbol –∏ –æ–±—ä–µ–∫—Ç quote —Å –ø–æ–ª—è–º–∏:
        timestamp, ask, ask_size, bid, bid_size, last, last_size, volume,
        turnover, open, high, low, close, change.
        –î–ª—è –æ–ø—Ü–∏–æ–Ω–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ–±—ä–µ–∫—Ç option —Å –≥—Ä–µ–∫–∞–º–∏ (delta, gamma –∏ –¥—Ä.)

        Args:
            symbol: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER@MISX)
        """
        return self.execute_request("GET", f"/v1/instruments/{symbol}/quotes/latest")

    def get_orderbook(self, symbol: str, depth: int = 10) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –±–∏—Ä–∂–µ–≤–æ–π —Å—Ç–∞–∫–∞–Ω (OrderBook)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞–∫–∞–Ω (best bid/ask).
        –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç orderbook —Å –º–∞—Å—Å–∏–≤–æ–º rows (—É—Ä–æ–≤–Ω–∏).
        –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å: price, sell_size, buy_size, action, mpid (–∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞), timestamp

        Args:
            symbol: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            depth: –ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π)
        """
        return self.execute_request("GET", f"/v1/instruments/{symbol}/orderbook", params={"depth": depth})

    def get_candles(
        self, symbol: str, timeframe: str = "day", start: str | None = None, end: str | None = None
    ) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ (Bars)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç OHLCV —Å–≤–µ—á–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
        –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç: symbol –∏ –º–∞—Å—Å–∏–≤ bars.
        –ö–∞–∂–¥—ã–π –±–∞—Ä: timestamp, open, high, low, close, volume

        Args:
            symbol: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            timeframe: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (1min, 5min, 15min, hour, day –∏ –¥—Ä.)
            start: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ ISO 8601 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            end: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ ISO 8601 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        params = {"timeframe": timeframe}
        if start:
            params["interval.start"] = start
        if end:
            params["interval.end"] = end
        return self.execute_request("GET", f"/v1/instruments/{symbol}/bars", params=params)

    def get_latest_trades(self, symbol: str) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É (LatestTrades)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: symbol –∏ –º–∞—Å—Å–∏–≤ trades.
        –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞: trade_id, mpid, timestamp, price, size, side (buy/sell)

        Args:
            symbol: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        return self.execute_request("GET", f"/v1/instruments/{symbol}/trades/latest")

    def get_session_details(self, token: str | None = None) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ (TokenDetails)

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: created_at, expires_at, md_permissions, account_ids, readonly

        Args:
            token: JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—É—â–∏–π)
        """
        token_to_check = token or self._get_current_token()
        if not token_to_check:
            return {"error": "No token available"}
        return self.execute_request("POST", "/v1/sessions/details", json={"token": token_to_check})
