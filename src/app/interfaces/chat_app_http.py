#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞ (—Å MCP —á–µ—Ä–µ–∑ HTTP)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run streamlit run src/app/interfaces/chat_app_http.py
    streamlit run src/app/interfaces/chat_app_http.py
"""

import json

import streamlit as st

from src.app.core import (
    get_http_client,
    get_settings,
    get_tools_for_llm,
    get_trading_system_prompt,
    run_conversation_with_tools,
)


def main() -> None:  # noqa: C901
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(page_title="AI –¢—Ä–µ–π–¥–µ—Ä (Finam + MCP)", page_icon="ü§ñ", layout="wide")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—Ä–µ–π–¥–µ—Ä–∞ (MCP REST)")
    st.caption("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Finam TradeAPI —á–µ—Ä–µ–∑ MCP REST API")

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings = get_settings()
        st.info(f"**–ú–æ–¥–µ–ª—å:** {settings.openrouter_model}")

        account_id = st.text_input("ID —Å—á–µ—Ç–∞", value="", help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        use_simple_prompt = st.checkbox("–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç", value=False, help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")

        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.messages = []
            st.session_state.mcp_tools = None
            st.rerun()

        st.markdown("---")

        # –°—Ç–∞—Ç—É—Å MCP API –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        with st.expander("üîê –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", expanded=True):
            try:
                mcp_client = get_http_client()
                response = mcp_client.session.get(f"{mcp_client.base_url}/health", timeout=5)
                if response.status_code == 200:
                    st.success("‚úÖ MCP API: –ø–æ–¥–∫–ª—é—á–µ–Ω")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π tool
                    try:
                        auth_result = mcp_client.call_tool("get_auth_info", {})
                        auth_info = json.loads(auth_result)

                        if auth_info.get("has_token"):
                            st.success("‚úÖ Finam API: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                            mode = auth_info.get("mode", "unknown")
                            if mode == "auth_manager":
                                st.info("üîÑ –†–µ–∂–∏–º: API –∫–ª—é—á (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)")
                                lifetime = auth_info.get("token_lifetime")
                                if lifetime:
                                    st.caption(f"‚è±Ô∏è –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç: {lifetime}")
                            else:
                                st.info("üîë –†–µ–∂–∏–º: JWT —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")

                            account_ids = auth_info.get("account_ids", [])
                            if account_ids:
                                st.caption(f"üìä –°—á–µ—Ç–∞: {', '.join(account_ids)}")

                            if auth_info.get("readonly"):
                                st.warning("‚ö†Ô∏è –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è")
                        else:
                            st.warning("‚ö†Ô∏è Finam API: –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                            st.caption("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FINAM_API_KEY –≤ .env")
                    except Exception:
                        st.info("‚ÑπÔ∏è Finam API: —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    st.error(f"‚ùå MCP API: –æ—à–∏–±–∫–∞ ({response.status_code})")
            except Exception as e:
                st.error(f"‚ùå MCP API: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                st.caption(f"–û—à–∏–±–∫–∞: {str(e)}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        if "mcp_tools" in st.session_state and st.session_state.mcp_tools:
            with st.expander("üîß MCP –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", expanded=False):
                st.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: **{len(st.session_state.mcp_tools)}** –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                for tool in st.session_state.mcp_tools:
                    st.markdown(f"- `{tool['function']['name']}`")

        st.markdown("---")
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        st.markdown("""
        - –ö–∞–∫–∞—è —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞?
        - –ü–æ–∫–∞–∂–∏ –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        - –ß—Ç–æ –≤ —Å—Ç–∞–∫–∞–Ω–µ –ø–æ –ì–∞–∑–ø—Ä–æ–º—É?
        - –ü–æ–∫–∞–∂–∏ —Å–≤–µ—á–∏ YNDX –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        - –ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞?
        - –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∞–∫—Ü–∏—é SBER@MISX
        - –ö–∞–∫–∏–µ –µ—Å—Ç—å –æ–ø—Ü–∏–æ–Ω—ã –Ω–∞ –ì–∞–∑–ø—Ä–æ–º?
        """)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # –ó–∞–≥—Ä—É–∑–∫–∞ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–æ–¥–∏–Ω —Ä–∞–∑)
    if "mcp_tools" not in st.session_state:
        with st.spinner("üîß –ó–∞–≥—Ä—É–∑–∫–∞ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MCP API
                http_client = get_http_client()
                if not http_client.health_check():
                    st.error("‚ùå MCP API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω.")
                    st.stop()

                tools = get_tools_for_llm()
                st.session_state.mcp_tools = tools
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tools)} MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
                st.stop()

    tools = st.session_state.mcp_tools

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ tool calls
            if "tool_calls" in message and message["tool_calls"]:
                with st.expander(f"üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(message['tool_calls'])}"):
                    for i, call in enumerate(message["tool_calls"], 1):
                        st.markdown(f"**{i}. {call['name']}**")
                        st.json(call["arguments"])
                        with st.expander("–†–µ–∑—É–ª—å—Ç–∞—Ç"):
                            try:
                                result_json = json.loads(call["result"])
                                st.json(result_json)
                            except Exception:
                                st.code(call["result"])

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
        from src.app.core import get_simple_system_prompt

        system_prompt = get_simple_system_prompt() if use_simple_prompt else get_trading_system_prompt()
        conversation_history = [{"role": "system", "content": system_prompt}]

        # –î–æ–±–∞–≤–ª—è–µ–º account_id –µ—Å–ª–∏ –µ—Å—Ç—å
        if account_id:
            conversation_history.append({
                "role": "system",
                "content": f"ID —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {account_id}. –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
            })

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg in st.session_state.messages:
            conversation_history.append({"role": msg["role"], "content": msg["content"]})

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant"), st.spinner("–î—É–º–∞—é –∏ –∏—Å–ø–æ–ª—å–∑—É—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã..."):
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º conversation —Å MCP tools (—Ç–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ!)
                final_answer, tool_calls = run_conversation_with_tools(
                    messages=conversation_history,
                    tools=tools,
                    temperature=0.3,
                    max_iterations=5,
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                if tool_calls:
                    st.info(f"üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_calls)}")
                    with st.expander("–î–µ—Ç–∞–ª–∏ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"):
                        for i, call in enumerate(tool_calls, 1):
                            st.markdown(f"**{i}. {call['name']}**")
                            st.json(call["arguments"])
                            st.code(call["result"][:500] + "..." if len(call["result"]) > 500 else call["result"])

                # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                st.markdown(final_answer)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                message_data = {"role": "assistant", "content": final_answer}
                if tool_calls:
                    message_data["tool_calls"] = tool_calls
                st.session_state.messages.append(message_data)

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback

                with st.expander("Stack trace"):
                    st.code(traceback.format_exc())


if __name__ == "__main__":
    main()
