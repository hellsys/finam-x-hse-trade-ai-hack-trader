"""
REST API wrapper –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–∞

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç HTTP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏,
–∏–∑–±–µ–≥–∞—è –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏ subprocess –≤ Docker.
"""

import logging
import os
import sys
from typing import Any

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

from app.adapters.finam_client import FinamAPIClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("uvicorn").setLevel(logging.INFO)
logging.getLogger("fastapi").setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Finam MCP REST API",
    description="REST API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Finam TradeAPI —á–µ—Ä–µ–∑ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª",
    version="1.0.0",
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç API
logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Finam API Client...")
finam_client = FinamAPIClient()
logger.info("‚úÖ Finam API Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
class ToolCallRequest(BaseModel):
    tool_name: str
    arguments: dict[str, Any]


class ToolCallResponse(BaseModel):
    success: bool
    result: Any
    error: str | None = None


class Tool(BaseModel):
    name: str
    description: str
    input_schema: dict[str, Any]


# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "service": "finam-mcp-api"}


@app.get("/tools", response_model=list[Tool])
async def list_tools():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

    Returns:
        –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI function calling
    """
    tools = [
        # AuthService
        Tool(
            name="auth",
            description="–ü–æ–ª—É—á–∏—Ç—å JWT-—Ç–æ–∫–µ–Ω –ø–æ API-–∫–ª—é—á—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ",
            input_schema={
                "type": "object",
                "properties": {"secret": {"type": "string", "description": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π API-–∫–ª—é—á"}},
                "required": ["secret"],
            },
        ),
        Tool(
            name="get_auth_info",
            description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            input_schema={
                "type": "object",
                "properties": {},
                "required": [],
            },
        ),
        Tool(
            name="get_session_details",
            description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ (TokenDetails). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: created_at, expires_at, md_permissions, account_ids, readonly",
            input_schema={
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)",
                    }
                },
                "required": [],
            },
        ),
        # MarketDataService
        Tool(
            name="get_quote",
            description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: timestamp, ask, ask_size, bid, bid_size, last, last_size, volume, turnover, open, high, low, close, change. –î–ª—è –æ–ø—Ü–∏–æ–Ω–æ–≤: –≥—Ä–µ–∫–∏ (delta, gamma)",
            input_schema={
                "type": "object",
                "properties": {"symbol": {"type": "string", "description": "–°–∏–º–≤–æ–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER@MISX)"}},
                "required": ["symbol"],
            },
        ),
        Tool(
            name="get_orderbook",
            description="–ü–æ–ª—É—á–∏—Ç—å –±–∏—Ä–∂–µ–≤–æ–π —Å—Ç–∞–∫–∞–Ω (best bid/ask). –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å: price, sell_size, buy_size, action, mpid (–∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞), timestamp",
            input_schema={
                "type": "object",
                "properties": {
                    "symbol": {"type": "string", "description": "–°–∏–º–≤–æ–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"},
                    "depth": {"type": "integer", "description": "–ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞ (–∫–æ–ª-–≤–æ —É—Ä–æ–≤–Ω–µ–π)", "default": 10},
                },
                "required": ["symbol"],
            },
        ),
        Tool(
            name="get_candles",
            description="–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ OHLCV —Å–≤–µ—á–∏. –ö–∞–∂–¥—ã–π –±–∞—Ä: timestamp, open, high, low, close, volume",
            input_schema={
                "type": "object",
                "properties": {
                    "symbol": {"type": "string", "description": "–°–∏–º–≤–æ–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"},
                    "timeframe": {
                        "type": "string",
                        "description": "–ò–Ω—Ç–µ—Ä–≤–∞–ª (1min/5min/15min/hour/day)",
                        "default": "day",
                    },
                    "start": {"type": "string", "description": "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (ISO 8601)"},
                    "end": {"type": "string", "description": "–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (ISO 8601)"},
                },
                "required": ["symbol"],
            },
        ),
        Tool(
            name="get_latest_trades",
            description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É. –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞: trade_id, mpid, timestamp, price, size, side (buy/sell)",
            input_schema={
                "type": "object",
                "properties": {"symbol": {"type": "string", "description": "–°–∏–º–≤–æ–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"}},
                "required": ["symbol"],
            },
        ),
        # AccountsService
        Tool(
            name="get_account",
            description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á—ë—Ç–µ: —Ç–∏–ø, —Å—Ç–∞—Ç—É—Å, –∫–∞–ø–∏—Ç–∞–ª (equity), –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å, –¥–µ–Ω–µ–∂–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã (cash), –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (positions), –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ —Å–µ–∫—Ü–∏—è–º (portfolio)",
            input_schema={
                "type": "object",
                "properties": {"account_id": {"type": "string", "description": "ID —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞"}},
                "required": ["account_id"],
            },
        ),
        Tool(
            name="get_transactions",
            description="–ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å—á—ë—Ç—É: –≤–≤–æ–¥/–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤, –∫–æ–º–∏—Å—Å–∏–∏, –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤. –ö–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: id, category (funding/fee), timestamp, symbol, change, trade, transaction_category",
            input_schema={
                "type": "object",
                "properties": {
                    "account_id": {"type": "string", "description": "ID —Å—á—ë—Ç–∞"},
                    "start": {"type": "string", "description": "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (ISO 8601)"},
                    "end": {"type": "string", "description": "–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (ISO 8601)"},
                    "limit": {"type": "integer", "description": "–ú–∞–∫—Å. —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π"},
                },
                "required": ["account_id"],
            },
        ),
        Tool(
            name="get_trades",
            description="–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤. –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞: trade_id, symbol, price, size, side (buy/sell), timestamp, order_id, account_id",
            input_schema={
                "type": "object",
                "properties": {
                    "account_id": {"type": "string", "description": "ID —Å—á—ë—Ç–∞"},
                    "start": {"type": "string", "description": "–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (ISO 8601)"},
                    "end": {"type": "string", "description": "–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (ISO 8601)"},
                    "limit": {"type": "integer", "description": "–ú–∞–∫—Å. —á–∏—Å–ª–æ –∑–∞–ø–∏—Å–µ–π"},
                },
                "required": ["account_id"],
            },
        ),
        Tool(
            name="get_positions",
            description="–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏. –ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è: symbol, quantity, average_price, current_price, market_value, unrealized_profit",
            input_schema={
                "type": "object",
                "properties": {"account_id": {"type": "string", "description": "ID —Å—á—ë—Ç–∞"}},
                "required": ["account_id"],
            },
        ),
        # OrdersService
        Tool(
            name="get_orders",
            description="–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ—Ä–¥–µ—Ä—ã. –ö–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä: order_id, status (New/Accepted/Rejected/PartiallyFilled/Filled/Withdrawn), –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏",
            input_schema={
                "type": "object",
                "properties": {"account_id": {"type": "string", "description": "ID —Å—á—ë—Ç–∞"}},
                "required": ["account_id"],
            },
        ),
        Tool(
            name="get_order",
            description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ",
            input_schema={
                "type": "object",
                "properties": {
                    "account_id": {"type": "string"},
                    "order_id": {"type": "string"},
                },
                "required": ["account_id", "order_id"],
            },
        ),
        Tool(
            name="create_order",
            description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∏—Ä–∂–µ–≤–æ–π –æ—Ä–¥–µ—Ä. order_data –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: symbol, quantity (–ª–æ—Ç—ã), side (buy/sell), type (market/limit/stop/stop_limit/take_profit), time_in_force (day/gtc/ioc/fok), limit_price, stop_price, stop_condition (bid/ask/last)",
            input_schema={
                "type": "object",
                "properties": {
                    "account_id": {"type": "string", "description": "ID —Å—á—ë—Ç–∞"},
                    "order_data": {"type": "object", "description": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞"},
                },
                "required": ["account_id", "order_data"],
            },
        ),
        Tool(
            name="cancel_order",
            description="–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä",
            input_schema={
                "type": "object",
                "properties": {
                    "account_id": {"type": "string"},
                    "order_id": {"type": "string"},
                },
                "required": ["account_id", "order_id"],
            },
        ),
        # AssetsService
        Tool(
            name="get_asset",
            description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: symbol, board, ticker, mic, isin, type (–∞–∫—Ü–∏—è/–æ–±–ª–∏–≥–∞—Ü–∏—è/—Ñ—å—é—á–µ—Ä—Å/–æ–ø—Ü–∏–æ–Ω), name, decimals, min_step, lot_size, expiration_date, quote_currency",
            input_schema={
                "type": "object",
                "properties": {
                    "symbol": {"type": "string", "description": "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER@MISX)"},
                    "account_id": {"type": "string", "description": "ID —Å—á—ë—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"},
                },
                "required": ["symbol", "account_id"],
            },
        ),
        Tool(
            name="get_asset_params",
            description="–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ —Å—á—ë—Ç–µ: tradeable (–º–æ–∂–Ω–æ –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å), longable/shortable, —Ä–∏—Å–∫–∏ (initial_margin, maintain_margin, risk_rate)",
            input_schema={
                "type": "object",
                "properties": {
                    "symbol": {"type": "string", "description": "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"},
                    "account_id": {"type": "string", "description": "ID —Å—á—ë—Ç–∞"},
                },
                "required": ["symbol", "account_id"],
            },
        ),
        Tool(
            name="get_options_chain",
            description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–æ–Ω–æ–≤ –Ω–∞ –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤. –ö–∞–∂–¥—ã–π –æ–ø—Ü–∏–æ–Ω: symbol, type (call/put), contract_size, strike, multiplier, –ø–µ—Ä–∏–æ–¥—ã —Ç–æ—Ä–≥–æ–≤ –∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏",
            input_schema={
                "type": "object",
                "properties": {
                    "underlying_symbol": {"type": "string", "description": "–ë–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER)"}
                },
                "required": ["underlying_symbol"],
            },
        ),
    ]

    return tools


@app.post("/call_tool", response_model=ToolCallResponse)
async def call_tool(request: ToolCallRequest):
    """
    –í—ã–∑–≤–∞—Ç—å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç

    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å –∏–º–µ–Ω–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    """
    tool_name = request.tool_name
    arguments = request.arguments

    logger.info(f"üîß –í—ã–∑–æ–≤ tool: {tool_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {list(arguments.keys())}")

    try:
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        if tool_name == "auth":
            result = finam_client.auth(arguments["secret"])
        elif tool_name == "get_auth_info":
            result = finam_client.get_auth_info()
        elif tool_name == "get_session_details":
            token = arguments.get("token")
            result = finam_client.get_session_details(token)
        elif tool_name == "get_quote":
            result = finam_client.get_quote(arguments["symbol"])
        elif tool_name == "get_orderbook":
            depth = arguments.get("depth", 10)
            result = finam_client.get_orderbook(arguments["symbol"], depth)
        elif tool_name == "get_candles":
            result = finam_client.get_candles(
                arguments["symbol"],
                arguments.get("timeframe", "day"),
                arguments.get("start"),
                arguments.get("end"),
            )
        elif tool_name == "get_latest_trades":
            result = finam_client.get_latest_trades(arguments["symbol"])
        elif tool_name == "get_account":
            result = finam_client.get_account(arguments["account_id"])
        elif tool_name == "get_transactions":
            result = finam_client.get_transactions(
                arguments["account_id"],
                arguments.get("start"),
                arguments.get("end"),
                arguments.get("limit"),
            )
        elif tool_name == "get_trades":
            result = finam_client.get_trades(
                arguments["account_id"],
                arguments.get("start"),
                arguments.get("end"),
                arguments.get("limit"),
            )
        elif tool_name == "get_positions":
            result = finam_client.get_positions(arguments["account_id"])
        elif tool_name == "get_orders":
            result = finam_client.get_orders(arguments["account_id"])
        elif tool_name == "get_order":
            result = finam_client.get_order(arguments["account_id"], arguments["order_id"])
        elif tool_name == "create_order":
            result = finam_client.create_order(arguments["account_id"], arguments["order_data"])
        elif tool_name == "cancel_order":
            result = finam_client.cancel_order(arguments["account_id"], arguments["order_id"])
        elif tool_name == "get_asset":
            result = finam_client.get_asset(arguments["symbol"], arguments["account_id"])
        elif tool_name == "get_asset_params":
            result = finam_client.get_asset_params(arguments["symbol"], arguments["account_id"])
        elif tool_name == "get_options_chain":
            result = finam_client.get_options_chain(arguments["underlying_symbol"])
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π tool: {tool_name}")
            raise HTTPException(status_code=400, detail=f"Unknown tool: {tool_name}")

        logger.info(f"‚úÖ Tool {tool_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return ToolCallResponse(success=True, result=result)

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ tool {tool_name}: {type(e).__name__}: {str(e)}")
        return ToolCallResponse(
            success=False,
            result=None,
            error=str(e),
        )


if __name__ == "__main__":
    import uvicorn

    port = int(os.getenv("MCP_API_PORT", "8000"))
    uvicorn.run(app, host="0.0.0.0", port=port)
