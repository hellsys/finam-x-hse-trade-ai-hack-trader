"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Finam TradeAPI

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–æ–≤, –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏.
"""

import logging
import os
from datetime import datetime, timedelta, timezone
from typing import Any

import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


class FinamAuthManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Finam TradeAPI
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç JWT —Ç–æ–∫–µ–Ω–∞–º–∏, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏.
    """

    def __init__(
        self,
        api_key: str | None = None,
        base_url: str | None = None,
        auto_refresh: bool = True,
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞ (–∏–∑ env FINAM_API_KEY)
            base_url: –ë–∞–∑–æ–≤—ã–π URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ env)
            auto_refresh: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏
        """
        self.api_key = api_key or os.getenv("FINAM_API_KEY", "")
        self.base_url = base_url or os.getenv("FINAM_API_BASE_URL", "https://api.finam.ru")
        self.auto_refresh = auto_refresh
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        self._jwt_token: str | None = None
        self._expires_at: datetime | None = None
        self._created_at: datetime | None = None
        self._session_details: dict[str, Any] | None = None
        
        # –ó–∞–ø–∞—Å –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)
        self._refresh_buffer = timedelta(minutes=5)

    def get_jwt_token(self) -> str | None:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π JWT —Ç–æ–∫–µ–Ω
        
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –±–ª–∏–∑–æ–∫ –∫ –∏—Å—Ç–µ—á–µ–Ω–∏—é.
        
        Returns:
            JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
        """
        # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if not self.api_key:
            logger.warning("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        if self._should_refresh_token():
            logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞...")
            self._refresh_token()
        
        return self._jwt_token

    def _should_refresh_token(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        
        Returns:
            True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        """
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç - –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
        if self._jwt_token is None:
            return True
        
        # –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if self._expires_at is None:
            return True
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
        if not self.auto_refresh:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω –∏–ª–∏ –±–ª–∏–∑–æ–∫ –∫ –∏—Å—Ç–µ—á–µ–Ω–∏—é
        now = datetime.now(timezone.utc)
        return now >= (self._expires_at - self._refresh_buffer)

    def _refresh_token(self) -> None:
        """
        –û–±–Ω–æ–≤–∏—Ç—å JWT —Ç–æ–∫–µ–Ω
        
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ API –∫–ª—é—á—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏.
        """
        try:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á –¥–ª—è –ª–æ–≥–æ–≤
            masked_key = self.api_key[:4] + "****" + self.api_key[-4:] if len(self.api_key) > 8 else "****"
            logger.debug(f"üì§ –ó–∞–ø—Ä–æ—Å JWT —Ç–æ–∫–µ–Ω–∞ —Å API –∫–ª—é—á–æ–º: {masked_key}")
            
            # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
            response = requests.post(
                f"{self.base_url}/v1/sessions",
                json={"secret": self.api_key},
                headers={"Content-Type": "application/json"},
                timeout=10,
            )
            response.raise_for_status()
            
            data = response.json()
            self._jwt_token = data.get("token")
            
            if self._jwt_token:
                masked_token = self._jwt_token[:10] + "..." + self._jwt_token[-10:]
                logger.info(f"‚úÖ JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {masked_token}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏
                self._fetch_session_details()
            else:
                logger.error("‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞: {e}")
            self._jwt_token = None

    def _fetch_session_details(self) -> None:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.
        """
        try:
            logger.debug("üì§ –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π —Å–µ—Å—Å–∏–∏...")
            
            response = requests.post(
                f"{self.base_url}/v1/sessions/details",
                json={"token": self._jwt_token},
                headers={"Content-Type": "application/json"},
                timeout=10,
            )
            response.raise_for_status()
            
            self._session_details = response.json()
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
            created_at_str = self._session_details.get("created_at")
            expires_at_str = self._session_details.get("expires_at")
            
            if created_at_str:
                self._created_at = datetime.fromisoformat(created_at_str.replace("Z", "+00:00"))
            
            if expires_at_str:
                self._expires_at = datetime.fromisoformat(expires_at_str.replace("Z", "+00:00"))
                lifetime = self.get_token_lifetime()
                logger.info(f"‚úÖ –î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã. –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç: {lifetime}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–∞—Ö
            account_ids = self._session_details.get("account_ids", [])
            if account_ids:
                logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—á–µ—Ç–∞: {', '.join(account_ids)}")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ—Å–ª–∏ —Ä–µ–∂–∏–º read-only
            if self._session_details.get("readonly"):
                logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–µ—Å—Å–∏–∏: {e}")

    def get_session_details(self) -> dict[str, Any] | None:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None
        """
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–æ–∫–µ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω
        self.get_jwt_token()
        return self._session_details

    def get_account_ids(self) -> list[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID —Å—á–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ ID —Å—á–µ—Ç–æ–≤
        """
        details = self.get_session_details()
        if details:
            return details.get("account_ids", [])
        return []

    def is_readonly(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Å—Å–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        
        Returns:
            True –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è read-only
        """
        details = self.get_session_details()
        if details:
            return details.get("readonly", False)
        return True

    def get_token_lifetime(self) -> timedelta | None:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        
        Returns:
            –í—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ None
        """
        if self._expires_at:
            now = datetime.now(timezone.utc)
            return self._expires_at - now
        return None

    def invalidate(self) -> None:
        """
        –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
        
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å get_jwt_token()
        –ø–æ–ª—É—á–∏—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.
        """
        self._jwt_token = None
        self._expires_at = None
        self._created_at = None
        self._session_details = None

    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        status = "authorized" if self._jwt_token else "not authorized"
        lifetime = self.get_token_lifetime()
        lifetime_str = f", expires in {lifetime}" if lifetime else ""
        return f"<FinamAuthManager: {status}{lifetime_str}>"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (singleton)
_auth_manager: FinamAuthManager | None = None


def get_auth_manager() -> FinamAuthManager:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä FinamAuthManager
    """
    global _auth_manager
    if _auth_manager is None:
        _auth_manager = FinamAuthManager()
    return _auth_manager

